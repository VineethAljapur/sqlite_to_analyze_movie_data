-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS movie_cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]
CREATE TABLE movies (id integer, name text, score integer);
CREATE TABLE movie_cast (movie_id integer, cast_id integer, cast_name text);



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]
.import ./movie-name-score.txt movies
.import ./movie-cast.txt movie_cast



-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM movie_cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]
CREATE INDEX scores_index ON movies(score);
CREATE INDEX cast_index ON movie_cast(cast_id);
CREATE INDEX movie_index ON movies(id);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate a proportion

-- [insert your SQL statement(s) BELOW this line]
SELECT COUNT(*)*100.0/(select count(*) from movies) as prop 
FROM movies WHERE score > 50;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find the highest scoring movies

-- [insert your SQL statement(s) BELOW this line]
select *
from movies
order by score desc, name
limit 7;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find the most prolific actors

-- [insert your SQL statement(s) BELOW this line]
select cast_id, cast_name, count(movie_id) as movie_count
from movie_cast
group by cast_id
order by movie_count desc, cast_name
limit 5; 

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]
select cast_id, cast_name, avg(score) as average_score
from movie_cast inner join movies on movies.id = movie_cast.movie_id
where score >= 50
group by cast_id
having count(movie_id) > 2
order by avg(score) desc, cast_name
limit 10;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

CREATE TEMP VIEW temp_colab AS
SELECT cast_id1.cast_id as cast_id1, cast_id2.cast_id as cast_id2, cast_id1.movie_id as movie_id
From movie_cast cast_id1, movie_cast cast_id2
Where cast_id1.movie_id = cast_id2.movie_id AND cast_id1.cast_id != cast_id2.cast_id
;

CREATE VIEW good_collaboration AS
select cast_id1, cast_id2, count(movie_id) as movie_count, avg(score) as average_movie_score
from temp_colab inner join movies on movies.id = temp_colab.movie_id
where cast_id1 < cast_id2
group by cast_id1, cast_id2
having count(movie_id) >= 3 and avg(score) >= 40
order by avg(score) desc;
;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]

-- select cast_id, avg(avg_score) as collaboration_score
-- from
CREATE TEMP VIEW best_colab AS 
Select * from
(select cast_id1 as cast_id, avg(average_movie_score) as avg_score
from good_collaboration 
group by cast_id1
UNION
select cast_id2 as cast_id, avg(average_movie_score) as avg_score
from good_collaboration 
group by cast_id2)
;

SELECT best_colab.cast_id, cast_name, avg(avg_score) as collaboration_score
from best_colab inner join movie_cast on movie_cast.cast_id = best_colab.cast_id
Group by best_colab.cast_id
Order by avg_score desc, cast_name
Limit 5;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]
CREATE VIRTUAL TABLE movie_overview 
USING fts4(id integer, name text, year integer, overview text, popularity decimal);
.import ./movie-overview.txt movie_overview


-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]
SELECT count(*) as count_overview
FROM movie_overview WHERE overview MATCH 'fight';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]
SELECT id
FROM movie_overview 
WHERE overview MATCH 'love NEAR/5 story';



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --